# -*- coding: utf-8 -*-
"""mbti-visual-basic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-NaxQZqvD42e-YpAsvds8rFYRsibtBCu
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/My Drive/mbti_1.csv')
df.head()

df['comment_count'] = df['posts'].str.count(pat=r"\|\|\|")+1
df['words'] = df['posts'].apply(lambda x: len(x.split()))
df

df['words/comment'] = df['words']/df['comment_count']
df

cnt_srs = df['type'].value_counts()
cnt_srs

mean_each=df.groupby('type').agg({'words/comment': 'mean'})
mean_each

sorted_mean = mean_each.sort_values(by='words/comment')
sorted_mean.index

plt.figure(figsize=(24,16))
plt.rc('xtick', labelsize=20) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=20) 
plt.rc('axes', titlesize=20) 
plt.rc('legend', fontsize=20)
sns.boxplot(y='type', x='words/comment', data=df, palette='Set1',showmeans=True, meanline=True,  meanprops={'linestyle':'--','color':'red','linewidth':2},
            order=sorted_mean.index,)
sns.swarmplot(y='type', x='words/comment', data=df, alpha=0.75,palette='Set3',order=sorted_mean.index,).set_title('Words/Comment for Each Personality',fontsize=24)

#seperate the upper figure into 2 figures(1)
plt.figure(figsize=(24,16))
plt.rc('xtick', labelsize=20) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=20) 
plt.rc('axes', titlesize=20) 
plt.rc('legend', fontsize=20) 
sns.boxplot( x='words/comment',y='type', data=df, showmeans=True, meanline=True, meanprops={'linestyle':'--','color':'red','linewidth':2},
            order=sorted_mean.index,
            palette='Set1').set_title('Words/Comment for Each Personality',fontsize=24)

#seperate the upper figure into 2 figures(2)
plt.figure(figsize=(24,16))
plt.rc('xtick', labelsize=20) 
plt.rc('ytick', labelsize=20) 
plt.rc('axes', labelsize=20) 
plt.rc('axes', titlesize=20) 
plt.rc('legend', fontsize=20)
sns.swarmplot(y='type', x='words/comment', data=df).set_title('Words/Comment for Each Personality',fontsize=24)

plt.figure(figsize=(20,10))
plt.ylabel('Number of Occurrences', fontsize=16)
plt.xlabel('Personality Types', fontsize=16)
plt.xticks(fontsize=16, rotation=0)
plt.yticks(fontsize=16, rotation=0)
sns.countplot(data=df, x='type')

#sns.countplot(cnt_srs.index, cnt_srs.values)

#df = pd.read_csv('/kaggle/input/mbti-type/mbti_1.csv')
# train = pd.read_csv('../input/mbti-type/mbti_1.csv')
mbti = {'I':'Introversion', 'E':'Extroversion', 'N':'Intuition', 
        'S':'Sensing', 'T':'Thinking', 'F': 'Feeling', 
        'J':'Judging', 'P': 'Perceiving'}
plt.figure(figsize=(20,10))
sns.barplot(cnt_srs.values, cnt_srs.index)
plt.gca().invert_yaxis()
plt.ylabel('type', fontsize=16)
plt.xlabel('count', fontsize=16)
plt.xticks(fontsize=16, rotation=0)
plt.yticks(fontsize=16, rotation=0)
plt.title('Number of Subjects for Each Personality',fontsize=24)
plt.show()

fig, ax = plt.subplots(figsize=(20, 10), subplot_kw=dict(aspect="equal"))
data = cnt_srs.values
ingredients = cnt_srs.index
def func(pct, allvals):
    absolute = int(pct/100.*np.sum(allvals))
    return "{:.1f}%".format(pct, absolute)
#wedges, texts, autotexts = ax.pie(data, labels=cnt_srs.index,autopct=lambda pct: func(pct, data),
 #                                 textprops=dict(color="w"),pctdistance=0.9,
  #                                explode=(0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.2,0.3,0.4))
wedges, texts, autotexts = ax.pie(data, labels=cnt_srs.values,autopct='%1.1f%%',
                                  textprops=dict(color="w"),pctdistance=0.9,
                                  explode=(0,0,0,0,0,0,0,0,0,0,0,0,0.1,0.2,0.3,0.4))
ax.legend(wedges, ingredients,
          title="Personality Types",
          #loc="center left",
          bbox_to_anchor=(1, 0, 0.5, 1))
plt.setp(autotexts, size=8,weight="bold")
ax.set_title("Percentage of each personality",size=16)
plt.show()

